#include <array>
#include <iostream>
#include <unordered_set>
#include <vector>

class TopologicalSort {
 public:
  TopologicalSort(int num_vertices, const std::vector<std::vector<int>>& graph)
      : num_vertices_(num_vertices), graph_(graph) {}

  void Run() {
    tin_.resize(num_vertices_);
    tout_.resize(num_vertices_);
    color_.resize(num_vertices_, 'w');
    std::unordered_set<int> set;
    std::array<int, 2> data = {0, 0};
    for (int v = 0; v < num_vertices_; ++v) {
      data[0] = v;
      if (color_[v] == 'w') {
        DFS(data);
      }
    }

    for (int i = 2 * num_vertices_ - 1; i >= num_vertices_; --i) {
      set.insert(tin_[i]);
      for (auto to : graph_[tin_[i]]) {
        if (bool(set.count(to))) {
          std::cout << "NO" << '\n';
          return;
        }
      }
    }
    std::cout << "YES" << '\n';
    for (int i = 2 * num_vertices_ - 1; i >= num_vertices_; --i) {
      std::cout << tin_[i] << " ";
    }
  }

 private:
  void DFS(std::array<int, 2>& data) {
    int v = data[0];
    color_[v] = 'g';
    tin_[data[0]] = data[1]++;
    for (auto to : graph_[v]) {
      data[0] = to;
      if (color_[to] == 'w') {
        DFS(data);
      }
    }
    tout_[v] = data[1]++;
    tin_.push_back(v);
    color_[v] = 'b';
  }

  int num_vertices_;
  const std::vector<std::vector<int>>& graph_;
  std::vector<int> tin_;
  std::vector<int> tout_;
  std::vector<char> color_;
};

int main() {
  int n, m;
  std::cin >> n >> m;

  std::vector<std::vector<int>> graph(n);

  for (int i = 0; i < m; ++i) {
    int x, y;
    std::cin >> x >> y;
    graph[x].push_back(y);
  }

  TopologicalSort top_sort(n, graph);
  top_sort.Run();

  return 0;
}
