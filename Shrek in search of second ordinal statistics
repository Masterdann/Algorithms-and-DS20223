#include <iostream>
#include <vector>

class SparseTable {
 private:
  std::vector<std::vector<std::pair<int, int>>> table;
  std::vector<int> logs;

 public:
  SparseTable(std::vector<int>& arr) {
    int n = arr.size();
    logs.resize(n + 1);

    for (int i = 2; i <= n; i++) {
      logs[i] = logs[i / 2] + 1;
    }

    table.resize(n, std::vector<std::pair<int, int>>(logs[n] + 1));

    for (int i = 0; i < n; i++) {
      table[i][0] = {arr[i], i};
    }

    for (int j = 1; (1 << j) <= n; j++) {
      for (int i = 0; (i + (1 << j) - 1) < n; i++) {
        table[i][j] = min(table[i][j - 1], table[i + (1 << (j - 1))][j - 1]);
      }
    }
  }

  std::pair<int, int> Query(int l, int r) {
    int j = logs[r - l + 1];
    std::pair<int, int> minRange = min(table[l][j], table[r - (1 << j) + 1][j]);
    return minRange;
  }
  int SecondMin(int l, int r) {
    std::pair<int, int> mini = Query(l, r);
    if (r == mini.second) {
      std::pair<int, int> answer = Query(l, r - 1);
      return answer.first;
    } else {
      if (l == mini.second) {
        std::pair<int, int> answer = Query(l + 1, r);
        return answer.first;
      } else {
        std::pair<int, int> left = Query(l, mini.second - 1);
        std::pair<int, int> right = Query(mini.second + 1, r);
        if (left.first < right.first) {
          return left.first;
        } else {
          return right.first;
        }
      }
    }
  }
};

int main() {
  int n, q;
  std::cin >> n >> q;
  std::vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
  }

  SparseTable st(arr);
  while (q--) {
    int l, r;
    std::cin >> l >> r;
    std::cout << st.SecondMin(l - 1, r - 1) << '\n';
  }

  return 0;
}
