#include <iostream>
#include <vector>

class Graph {
 public:
  int n;
  std::vector<std::vector<int>> adjacency_matrix;
  Graph(int size)
      : n(size), adjacency_matrix(size, std::vector<int>(size, 0)) {}

  void AddEdge(int i, int j) { adjacency_matrix[i][j] = 1; }

  std::vector<std::vector<int>> FindPathMatrix() {
    std::vector<std::vector<int>> path_matrix = adjacency_matrix;
    for (int k = 0; k < n; k++) {
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
          path_matrix[i][j] =
              path_matrix[i][j] || (path_matrix[i][k] && path_matrix[k][j]);
        }
      }
    }

    return path_matrix;
  }
};

int main() {
  int n;
  std::cin >> n;
  Graph graph(n);
  for (int i = 0; i < n; i++) {
    std::string s;
    std::cin >> s;
    for (int j = 0; j < n; j++) {
      if (s[j] == '1') {
        graph.AddEdge(i, j);
      }
    }
  }
  std::vector<std::vector<int>> path_matrix = graph.FindPathMatrix();
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      std::cout << path_matrix[i][j];
    }
    std::cout << "\n";
  }

  return 0;
}
